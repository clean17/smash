<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.springbreaking.other.tempPersistence.TempMapper">
    <!--
        일반적으로 MyBatis는 Java프레임워크에서 SQL에 집중하도록 만들어졌습니다.
        아래의 요소들로 xml을 구성할 수 있습니다.

        cache - 해당 네임스페이스을 위한 캐시 설정
        cache-ref - 다른 네임스페이스의 캐시 설정에 대한 참조
        resultMap - 데이터베이스 결과데이터를 객체에 로드하는 방법을 정의하는 엘리먼트
        sql - 다른 구문에서 재사용하기 위한 SQL 조각

        insert - 매핑된 INSERT 구문.
        update - 매핑된 UPDATE 구문.
        delete - 매핑된 DELEETE 구문.
        select - 매핑된 SELECT 구문.

    -->

    <!-- 변수 설정 -->
    <typeAlias type="com.someapp.model.User" alias="User"/>

    <!-- 여러개의 조건으로 조회된 id로 전체 로우의 상태값 변경 -->
    <update id="updateStatusBasedOnSelect" parameterType="map">
        UPDATE yourTableName
        SET status =
            CASE
                WHEN id IN (
                            SELECT id FROM anotherTable
                            WHERE
                            <foreach item="itemId" index="index" collection="ids" open="(" separator=" OR" close=")">
                                id = #{itemId}
                            </foreach>
                            )
                THEN 1
                ELSE 0
                ELSE 0
            END;
    </update>

    <!-- useGeneratedKeys, keyProperty 설정을 통해 insert된 로우의 자동증가 id를 리턴할 수 있다.
     keyProperty : 리턴된 키를 셋팅할 프로퍼티를 지정
     -->
    <insert id="insertAuthor" useGeneratedKeys="true"
            keyProperty="id">
        insert into Author (username,password,email,bio)
        values (#{username},#{password},#{email},#{bio})
    </insert>

    <!-- DB가 다중 레코드 입력을 지원한다면 -->
    <insert id="insertAuthor" useGeneratedKeys="true"
            keyProperty="id">
        insert into Author (username, password, email, bio) values
        <foreach item="item" collection="list" separator=",">
            (#{item.username}, #{item.password}, #{item.email}, #{item.bio})
        </foreach>
    </insert>

    <!-- 자동 생성키 칼럼을 지원하지 않는 DB도 도와준다 -->
    <insert id="insertAuthor">
        <selectKey keyProperty="id" resultType="int" order="BEFORE">
            select CAST(RANDOM()*1000000 as INTEGER) a from SYSIBM.SYSDUMMY1
        </selectKey>
        insert into Author
        (id, username, password, email,bio, favourite_section)
        values
        (#{id}, #{username}, #{password}, #{email}, #{bio}, #{favouriteSection,jdbcType=VARCHAR})
    </insert>

    <!-- sql 조각 -->
    <sql id="userColumns"> ${alias}.id,${alias}.username,${alias}.password </sql>
    <select id="selectUsers" resultType="map">
        select
        <include refid="userColumns"><property name="alias" value="t1"/></include>,
        <include refid="userColumns"><property name="alias" value="t2"/></include>
        from some_table t1
        cross join some_table t2
    </select>
    <!-- sql 내부의 sql -->
    <sql id="someinclude">
        from
        <include refid="${include_target}"/>
    </sql>

    <!-- 쿼리 가독성 -->
    <sql id="query_1">
        WITH B AS (
            SELECT * FROM TABLE_2
        )
        SELECT
            A.ID
             ,   A.FIRST_NAME
             ,   A.SECOND_NAME
             ,   A.LAST_NAME
             ,   A.AGE
             ,  (SELECT B.NAME FROM B WHERE B.NAME = A.FIRST_NAME) AS B_1.NAME
             ,  (SELECT B.NAME FROM B WHERE B.NAME = A.SECOND_NAME) AS B_2.NAME
             ,  (SELECT B.NAME FROM B WHERE B.NAME = A.LAST_NAME) AS B_3.NAME
        FROM TABLE_1 A
    </sql>

    <sql id="query_2">
        SELECT
            A.ID
             ,   A.FIRST_NAME
             ,   A.SECOND_NAME
             ,   A.LAST_NAME
             ,   A.AGE
             ,   GET_NAME_FROM_TABLE_2(A.FIRST_NAME) AS B_1.NAME
             ,   GET_NAME_FROM_TABLE_2(A.SECOND_NAME) AS B_2.NAME
             ,   GET_NAME_FROM_TABLE_2(A.LAST_NAME) AS B_3.NAME
        FROM TABLE_1 A;
    </sql>

    <!-- FUNCTION
    CREATE OR REPLACE FUNCTION GET_NAME_FROM_TABLE_2(p_name VARCHAR2) RETURN VARCHAR2 IS
        v_name TABLE_2.NAME%TYPE;
    BEGIN
        SELECT NAME INTO v_name
        FROM TABLE_2
        WHERE NAME = p_name;

        RETURN v_name;
    END get_name_from_table_2;
    -->

</mapper>