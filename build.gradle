/**
 * 플러그인의 용도는 프로젝트 빌드 및 구성에 추가적인 기능과 동작을 제공
 */
plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.14'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

/**
 * 황당하지만
 *
 * java 로 감싸지 않으면 갑자기 gradle이 실행이 안됨 - 2023.09.16
 */
java {
    sourceCompatibility = '11'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

/**
 * Gradle은 Maven 종속성 소스를 크게 의존한다.
 */
repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url "https://repo.spring.io/release"
    }
//    maven { == mavenCentral
//        url = uri('https://repo1.maven.org/maven2/')
//    }
//    maven { == mavenCentral
//        url = uri('https://repo.maven.apache.org/maven2/')
//    }
}

ext {
//    set('vaadinVersion', "14.10.7")

    // https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-gcp-pubsub/1.2.8.RELEASE
    set('springCloudGcpVersion', "1.2.5.RELEASE")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test' // 단위 테스트
    runtimeOnly 'com.h2database:h2'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.slf4j:slf4j-api'

    // @RepositoryRestResource 을 사용한 repository를 자동으로 RESTful서비스로 만들어 줌
    // -> CRUD 연산을 위한 REST API 엔드포인트가 자동으로 생성
    // -> HAL 형식 지원 ( HATEOAS 원칙을 구현하기 위한 표현 형식 )
    implementation 'org.springframework.boot:spring-boot-starter-data-rest'

    // 비동기 - javaDSL 제공 [ @Scheduled(fixedRate = 5000)  + @EnableScheduling ]
    // testImplementation 'org.awaitility:awaitility:3.1.2'

    // 파일 업로드 html 뷰
//    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

/*    // 시큐리티 + ldap
    implementation 'org.springframework.boot:spring-boot-starter-security'
    // LDAP 기반 사용자 저장소는 주로 조직의 사용자 인증 및 권한 관리, 전화번호부 서비스, 이메일 시스템의 주소록 등 다양한 디렉터리 서비스에 사용
    // 여기서는 내부 서버의 로그인 데이터 저장용으로 사용되었음
    implementation 'org.springframework.ldap:spring-ldap-core'
    implementation 'org.springframework.security:spring-security-ldap'
    implementation 'com.unboundid:unboundid-ldapsdk'*/

    // Redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // RabbitMQ
    implementation 'org.springframework.boot:spring-boot-starter-amqp'

    // validated
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // actuator
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // spring batch
    implementation 'org.springframework.boot:spring-boot-starter-batch'
//    runtimeOnly 'org.hsqldb:hsqldb' // H2DB 는 주석처리 필요

/*    // security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    // thymeleaf + security 통합
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6:3.1.1.RELEASE'
    implementation 'org.springframework.security:spring-security-test'*/

    // jsp
    // providedCompile -> 컴파일에 필요, 실행시는 제공됨 // compileOnly 를 권장
    // implementation -> 종속성이 실행 클래스, 컴파일 클래스에 추가됨. 실행 시 사용됨
    implementation 'javax.servlet:jstl'
    implementation 'org.apache.tomcat.embed:tomcat-embed-jasper'
//    compileOnly 'org.apache.tomcat.embed:tomcat-embed-jasper'

    // Hateoas
//     implementation 'org.springframework.boot:spring-boot-starter-hateoas'

    // Postgresql
//    implementation 'org.postgresql:postgresql'

    //
    testImplementation 'org.apache.httpcomponents.client5:httpclient5'

    // vaadin // 24.1.10 버전은 자바11과 호환되지 않음 - 사용하려니 전체 웹팩을 다운받음
//    implementation 'com.vaadin:vaadin-spring-boot-starter'

    // pub sub
//    implementation "org.springframework.cloud:spring-cloud-gcp-starter-pubsub"
//    implementation 'com.google.cloud:spring-cloud-gcp-starter-pubsub' // 이건 다른 블로그
//    implementation "org.springframework.integration:spring-integration-core"

//    // Spring Data Cassandra
//    implementation 'org.springframework.boot:spring-boot-starter-data-cassandra'
//    // DataStax Astra DB Cassandra-as-a-Service
//    implementation 'com.datastax.astra:astra-spring-boot-starter:0.1.13'


    // R2DBC
    implementation 'org.springframework.data:spring-data-r2dbc'
    // implementation 'io.r2dbc:r2dbc-postgresql:0.8.6.RELEASE' // 예를들어 PostreSql과 함께 사용한다면
    runtimeOnly 'io.r2dbc:r2dbc-h2' // h2 이용시
    testImplementation 'io.projectreactor:reactor-test'


    /**
     * Docker + Cassandra 컨테이너 실행
     * docker run -p 9042:9042 --rm --name cassandra -d cassandra:4.0.7
     *
     * Cassandra 쿼리 언어 셸에 액세스
     * docker exec -it cassandra bash -c "cqlsh -u cassandra -p cassandra"
     *
     * 애플리케이션 키 스페이스 생성
     * CREATE KEYSPACE spring_cassandra WITH replication = {'class' : 'SimpleStrategy', 'replication_factor' : 1};
     *
     */

    // GraphQL Java Core
    implementation 'org.springframework.boot:spring-boot-starter-graphql'
    testImplementation 'org.springframework.graphql:spring-graphql-test'
//    testImplementation 'org.springframework:spring-webflux'

}


// Spring Cloud BOM 으로 버전 관리하기
dependencyManagement {
//    imports {
//        mavenBom "com.vaadin:vaadin-bom:${vaadinVersion}"
//    }
//    imports {
//        mavenBom "org.springframework.cloud:spring-cloud-gcp-dependencies:${springCloudGcpVersion}"
//    }
}

tasks.named('test') {
    useJUnitPlatform()
}

