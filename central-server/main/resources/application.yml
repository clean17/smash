server:
#  port: 8761 # 유레카
  port: 8080

local:
  server:
    port: 8080

#management:
#  server:
#    port: 8080
#    address: 127.0.0.1
#  endpoint:
#    web:
#      expose: include=*


spring:
  datasource:
    url: jdbc:h2:mem:testdb
    driver-class-name: org.h2.Driver
    username: sa
    password:
  # 적용할 스키마 수동 설정
  sql:
    init:
      schema-locations: classpath:schema-all.sql

      
  ldap: # 스프링부트의 임베디드 LDAP서버 설정 - 내부 개발 목적 ( 시큐리티 )
    embedded:
      ldif: classpath:test-server.ldif # 리소스 디렉토리
      base-dn: dc=springframework,dc=org
      port: 8389

  servlet:
    multipart:
      max-file-size: 128KB # 최대 크기 제한
      max-request-size: 128KB # formData 요청 크기 제한

  redis:
    host: localhost
    port: 6379

  artemis:
    mode: embedded

  mvc:
    view:
      prefix: /WEB-INF/jsp/
      suffix: .jsp
    throw-exception-if-no-handler-found: true

  # json pretty-printed
  jackson:
    serialization:
      indent_output: true

  application:
    name: myConfig

  # 중앙 서버에서 구성 설정 가져오기
  config:
    import: optional:configserver:http://localhost:8888/
    # optional 해당 설정 소스가 없거나 접근할 수 없는 경우에도 애플리케이션 시작을 계속하도록 지시 - > http://localhost:8888/ 에서 외부 설정을 가져오도록 지시
    # optional: 접두사는 이 설정 소스가 필수가 아니라는 것을 의미합니다. 만약 Config Server에 접근할 수 없거나 문제가 발생해도, 애플리케이션은 계속 시작하려고 시도합니다.
    
    

  #  # Apache Cassandra
#  cassandra:
#    schema-action: CREATE_IF_NOT_EXISTS
#    request:
#      timeout: 10s
#    connection:
#      connect-timeout: 10s
#      init-query-timeout: 10s
#    local-datacenter: datacenter1
#    keyspace-name: spring_cassandra

  # graphql
  graphql:
    graphiql:
      enabled: true


# 사전에 Astra 웹페이지에서 DB를 생성.. 또는 docker에서 DB를 만들어야 함
#astra:
#  # credential
#  client-id: testId
#  client-secret: 1234
#  application-token: tempToken
#  # start instance
#  cloud-region: kor
#  database-id: testDb
#  keyspace: spring_cassandra


storage:
  location: D:\someDirectory

# @Value 또는 @ConfigurationProperties 을 사용하여 설정을 가져갈 수 있습니다.
cors:
  allowed-origins:
    - http://localhost:8080
    - http://another-example.com
  allowed-methods:
    - GET
    - POST
    - PUT
    - DELETE

# spring cloud
#eureka:
#  client:
#    register-with-eureka: false # 자신을 유레카 서버에 등록하지 않도록
#    fetch-registry: false # 유레카 서버가 다른 유레카 서버 서비스 목록을 가져오지 않도록
#
logging:
  level:
    com.netflix.eureka: OFF
    com.netflix.discovery: OFF
  # 모든 빈 출력
#    org:
#      springframework:
#        beans: DEBUG

# actuator 엔드포인트 활성화 - 빈 확인
management:
  endpoints:
    web:
      exposure:
        include: beans # "*"
        # Spring Boot Actuator를 사용할 때 특정 관리 엔드포인트를 웹을 통해 노출시키도록 설정합니다.



